GAS LISTING /tmp/ccYtR0Wt.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 55736572 		.string	"User finished\n"
   9      2066696E 
   9      69736865 
   9      640A00
  10              		.text
  11              		.align	2
  12              		.globl	_Z11testWrapperPv
  14              	_Z11testWrapperPv:
  15              	.LFB59:
  16              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by DjordjeS on 21.7.2022.
   3:src/main.cpp  **** //
   4:src/main.cpp  **** 
   5:src/main.cpp  **** #include "../h/tcb.hpp"
   6:src/main.cpp  **** #include "../h/print.hpp"
   7:src/main.cpp  **** #include "../test/printing.hpp"
   8:src/main.cpp  **** #include "../h/riscv.hpp"
   9:src/main.cpp  **** #include "../h/syscall_c.h"
  10:src/main.cpp  **** #include "../h/userMain.hpp"
  11:src/main.cpp  **** #include "../h/MemoryAllocator.hpp"
  12:src/main.cpp  **** 
  13:src/main.cpp  **** void testWrapper(void *arg){
  17              		.loc 1 13 28
  18              		.cfi_startproc
  19              	.LVL0:
  20 0000 130101FF 		addi	sp,sp,-16
  21              		.cfi_def_cfa_offset 16
  22 0004 23341100 		sd	ra,8(sp)
  23 0008 23308100 		sd	s0,0(sp)
  24              		.cfi_offset 1, -8
  25              		.cfi_offset 8, -16
  26 000c 13040101 		addi	s0,sp,16
  27              		.cfi_def_cfa 8, 0
  14:src/main.cpp  ****     userMain();
  28              		.loc 1 14 5
  29              		.loc 1 14 13 is_stmt 0
  30 0010 97000000 		call	_Z8userMainv@plt
  30      E7800000 
  31              	.LVL1:
  15:src/main.cpp  ****     printString("User finished\n");
  32              		.loc 1 15 5 is_stmt 1
  33              		.loc 1 15 16 is_stmt 0
  34 0018 17050000 		lla	a0,.LC0
  34      13050500 
  35 0020 97000000 		call	_Z11printStringPKc@plt
  35      E7800000 
  36              	.LVL2:
  16:src/main.cpp  **** }
GAS LISTING /tmp/ccYtR0Wt.s 			page 2


  37              		.loc 1 16 1
  38 0028 83308100 		ld	ra,8(sp)
  39              		.cfi_restore 1
  40 002c 03340100 		ld	s0,0(sp)
  41              		.cfi_restore 8
  42              		.cfi_def_cfa 2, 16
  43 0030 13010101 		addi	sp,sp,16
  44              		.cfi_def_cfa_offset 0
  45 0034 67800000 		jr	ra
  46              		.cfi_endproc
  47              	.LFE59:
  49              		.section	.rodata.str1.8
  50 000f 00       		.align	3
  51              	.LC1:
  52 0010 4D61696E 		.string	"Main finished\n"
  52      2066696E 
  52      69736865 
  52      640A00
  53              		.text
  54              		.align	2
  55              		.globl	main
  57              	main:
  58              	.LFB60:
  17:src/main.cpp  **** 
  18:src/main.cpp  **** void main(){
  59              		.loc 1 18 12 is_stmt 1
  60              		.cfi_startproc
  61 0038 130101FC 		addi	sp,sp,-64
  62              		.cfi_def_cfa_offset 64
  63 003c 233C1102 		sd	ra,56(sp)
  64 0040 23388102 		sd	s0,48(sp)
  65 0044 23349102 		sd	s1,40(sp)
  66 0048 23302103 		sd	s2,32(sp)
  67 004c 233C3101 		sd	s3,24(sp)
  68 0050 23384101 		sd	s4,16(sp)
  69              		.cfi_offset 1, -8
  70              		.cfi_offset 8, -16
  71              		.cfi_offset 9, -24
  72              		.cfi_offset 18, -32
  73              		.cfi_offset 19, -40
  74              		.cfi_offset 20, -48
  75 0054 13040104 		addi	s0,sp,64
  76              		.cfi_def_cfa 8, 0
  19:src/main.cpp  ****     MemoryAllocator::initMemory();
  77              		.loc 1 19 5
  78              		.loc 1 19 32 is_stmt 0
  79 0058 97000000 		call	_ZN15MemoryAllocator10initMemoryEv@plt
  79      E7800000 
  80              	.LVL3:
  20:src/main.cpp  ****     TCB* kernelThread = TCB::initKernel();
  81              		.loc 1 20 5 is_stmt 1
  82              		.loc 1 20 40 is_stmt 0
  83 0060 97000000 		call	_ZN3TCB10initKernelEv@plt
  83      E7800000 
  84              	.LVL4:
  85 0068 93090500 		mv	s3,a0
  86              	.LVL5:
GAS LISTING /tmp/ccYtR0Wt.s 			page 3


  21:src/main.cpp  ****     TCB* inactiveThread = TCB::initInactiveThread();
  87              		.loc 1 21 5 is_stmt 1
  88              		.loc 1 21 50 is_stmt 0
  89 006c 97000000 		call	_ZN3TCB18initInactiveThreadEv@plt
  89      E7800000 
  90              	.LVL6:
  91 0074 13090500 		mv	s2,a0
  92              	.LVL7:
  22:src/main.cpp  ****     TCB* consolePrintThread = TCB::initConsoleThread();
  93              		.loc 1 22 5 is_stmt 1
  94              		.loc 1 22 53 is_stmt 0
  95 0078 97000000 		call	_ZN3TCB17initConsoleThreadEv@plt
  95      E7800000 
  96              	.LVL8:
  97 0080 93040500 		mv	s1,a0
  98              	.LVL9:
  23:src/main.cpp  **** 
  24:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
  99              		.loc 1 24 5 is_stmt 1
 100              		.loc 1 24 19 is_stmt 0
 101 0084 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
 101      83B70700 
 102              	.LVL10:
 103              	.LBB16:
 104              	.LBB17:
 105              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by DjordjeS on 16.7.2022.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../h/consolebuffer.hpp"
   9:src/../h/riscv.hpp **** #include "../lib/hw.h"
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** class Riscv{
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // stvec register is a register that holds the base address of the S-mode
  30:src/../h/riscv.hpp ****     // trap vector. When an exception occurs, the pc is set to stvec.
  31:src/../h/riscv.hpp ****     // read register stvec
GAS LISTING /tmp/ccYtR0Wt.s 			page 4


  32:src/../h/riscv.hpp ****     static uint64 r_stvec();
  33:src/../h/riscv.hpp ****     // write register stvec
  34:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // read register stval
  37:src/../h/riscv.hpp ****     static uint64 r_stval();
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1), //SIE enables or disables all interrupts in supervisor mode
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5), //SPIE indicates whether S-level interrupts were enabled before en
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8), //SPP indicates the privilege level thread was at before entering S
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     static ConsoleBuffer *buffer_input, *buffer_output;
  83:src/../h/riscv.hpp **** private:
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // supervisor trap handler
  86:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     static uint64 sysfunctions(uint64*);
GAS LISTING /tmp/ccYtR0Wt.s 			page 5


  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp **** };
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  93:src/../h/riscv.hpp **** {
  94:src/../h/riscv.hpp ****     uint64 volatile scause;
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  96:src/../h/riscv.hpp ****     return scause;
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 100:src/../h/riscv.hpp **** {
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile sepc;
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 108:src/../h/riscv.hpp ****     return sepc;
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** //stvec register is a register that holds the base address of the S-mode
 118:src/../h/riscv.hpp **** //trap vector. When an exception occurs, the pc is set to stvec.
 119:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 120:src/../h/riscv.hpp **** {
 121:src/../h/riscv.hpp ****     uint64 volatile stvec;
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 123:src/../h/riscv.hpp ****     return stvec;
 124:src/../h/riscv.hpp **** }
 125:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 106              		.loc 2 127 5 is_stmt 1
 107              		.loc 2 127 69 is_stmt 0
 108              	#APP
 109              	# 127 "src/../h/riscv.hpp" 1
 128              	}
 110              		csrw stvec, a5
 111              	# 0 "" 2
 112              	.LVL11:
 113              	#NO_APP
 114              	.LBE17:
 115              	.LBE16:
  25:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
 116              		.loc 1 25 5 is_stmt 1
 117              	.LBB18:
 118              	.LBB19:
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 131:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccYtR0Wt.s 			page 6


 132:src/../h/riscv.hpp ****     uint64 volatile stval;
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 134:src/../h/riscv.hpp ****     return stval;
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     uint64 volatile sip;
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 156:src/../h/riscv.hpp ****     return sip;
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 119              		.loc 2 166 5
 120              		.loc 2 166 68 is_stmt 0
 121 0090 93072000 		li	a5,2
 122              	#APP
 123              	# 166 "src/../h/riscv.hpp" 1
 167              	}
 124              		csrs sstatus, a5
 125              	# 0 "" 2
 126              	.LVL12:
 127              	#NO_APP
 128              	.LBE19:
 129              	.LBE18:
  26:src/main.cpp  **** 
  27:src/main.cpp  ****     thread_t user1;
 130              		.loc 1 27 5 is_stmt 1
  28:src/main.cpp  ****     thread_create(&user1, testWrapper, (void*)nullptr);
 131              		.loc 1 28 5
 132              		.loc 1 28 18 is_stmt 0
 133 0098 13060000 		li	a2,0
 134 009c 97050000 		lla	a1,_Z11testWrapperPv
 134      93850500 
 135 00a4 130584FC 		addi	a0,s0,-56
GAS LISTING /tmp/ccYtR0Wt.s 			page 7


 136 00a8 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
 136      E7800000 
 137              	.LVL13:
 138 00b0 6F00C000 		j	.L7
 139              	.L4:
  29:src/main.cpp  **** 
  30:src/main.cpp  ****     while (!user1->isFinished() || Riscv::buffer_output->getSize() > 0) {
  31:src/main.cpp  ****         thread_dispatch();
 140              		.loc 1 31 9 is_stmt 1 discriminator 4
 141              		.loc 1 31 24 is_stmt 0 discriminator 4
 142 00b4 97000000 		call	_Z15thread_dispatchv@plt
 142      E7800000 
 143              	.LVL14:
 144              	.L7:
  30:src/main.cpp  ****         thread_dispatch();
 145              		.loc 1 30 5 is_stmt 1
  30:src/main.cpp  ****         thread_dispatch();
 146              		.loc 1 30 33
  30:src/main.cpp  ****         thread_dispatch();
 147              		.loc 1 30 30 is_stmt 0
 148 00bc 833784FC 		ld	a5,-56(s0)
 149              	.LVL15:
 150              	.LBB20:
 151              	.LBB21:
 152              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   2:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   3:src/../h/tcb.hpp **** 
   4:src/../h/tcb.hpp **** #include "../lib/hw.h"
   5:src/../h/tcb.hpp **** #include "syscall_c.h"
   6:src/../h/tcb.hpp **** #include "scheduler.hpp"
   7:src/../h/tcb.hpp **** #include "list.hpp"
   8:src/../h/tcb.hpp **** 
   9:src/../h/tcb.hpp **** // Thread Control Block
  10:src/../h/tcb.hpp **** class TCB{
  11:src/../h/tcb.hpp **** public:
  12:src/../h/tcb.hpp ****     //---[NEW i DELETE]--------------------------------------------
  13:src/../h/tcb.hpp ****     void *operator new(size_t n){return __mem_alloc(n);}
  14:src/../h/tcb.hpp ****     void *operator new[](size_t n){return __mem_alloc(n);}
  15:src/../h/tcb.hpp ****     void operator delete(void *p) {__mem_free(p);}
  16:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
  17:src/../h/tcb.hpp ****     //-------------------------------------------------------------
  18:src/../h/tcb.hpp ****     enum state {CREATED, READY, RUNNING, FINISHED, BLOCKED, SLEEPING, INACTIVE};
  19:src/../h/tcb.hpp **** 
  20:src/../h/tcb.hpp ****     ~TCB();
  21:src/../h/tcb.hpp **** 
  22:src/../h/tcb.hpp ****     bool isFinished() const {
  23:src/../h/tcb.hpp ****         if(current_state==FINISHED){
 153              		.loc 3 23 9 is_stmt 1
 154              		.loc 3 23 12 is_stmt 0
 155 00c0 03A70703 		lw	a4,48(a5)
 156              		.loc 3 23 9
 157 00c4 93073000 		li	a5,3
 158              	.LVL16:
 159 00c8 E316F7FE 		bne	a4,a5,.L4
 160              	.LVL17:
 161              	.LBE21:
GAS LISTING /tmp/ccYtR0Wt.s 			page 8


 162              	.LBE20:
  30:src/main.cpp  ****         thread_dispatch();
 163              		.loc 1 30 65
 164 00cc 97070000 		la	a5,_ZN5Riscv13buffer_outputE
 164      83B70700 
 165 00d4 03B50700 		ld	a0,0(a5)
 166 00d8 97000000 		call	_ZNK13ConsoleBuffer7getSizeEv@plt
 166      E7800000 
 167              	.LVL18:
  30:src/main.cpp  ****         thread_dispatch();
 168              		.loc 1 30 33
 169 00e0 E34AA0FC 		bgtz	a0,.L4
  32:src/main.cpp  ****     }
  33:src/main.cpp  ****     printString("Main finished\n");
 170              		.loc 1 33 5 is_stmt 1
 171              		.loc 1 33 16 is_stmt 0
 172 00e4 17050000 		lla	a0,.LC1
 172      13050500 
 173 00ec 97000000 		call	_Z11printStringPKc@plt
 173      E7800000 
 174              	.LVL19:
  34:src/main.cpp  **** 
  35:src/main.cpp  ****     delete user1;
 175              		.loc 1 35 5 is_stmt 1
 176              		.loc 1 35 12 is_stmt 0
 177 00f4 033A84FC 		ld	s4,-56(s0)
 178              		.loc 1 35 17
 179 00f8 630E0A00 		beqz	s4,.L6
 180              		.loc 1 35 12 discriminator 1
 181 00fc 13050A00 		mv	a0,s4
 182 0100 97000000 		call	_ZN3TCBD1Ev@plt
 182      E7800000 
 183              	.LVL20:
 184              	.LBB22:
 185              	.LBB23:
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 186              		.loc 3 15 36 is_stmt 1 discriminator 1
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 187              		.loc 3 15 46 is_stmt 0 discriminator 1
 188 0108 13050A00 		mv	a0,s4
 189 010c 97000000 		call	__mem_free@plt
 189      E7800000 
 190              	.LVL21:
 191              	.L6:
 192              	.LBE23:
 193              	.LBE22:
  36:src/main.cpp  ****     delete kernelThread;
 194              		.loc 1 36 5 is_stmt 1
 195              		.loc 1 36 24 is_stmt 0
 196 0114 638E0900 		beqz	s3,.L8
 197              		.loc 1 36 12 discriminator 1
 198 0118 13850900 		mv	a0,s3
 199 011c 97000000 		call	_ZN3TCBD1Ev@plt
 199      E7800000 
 200              	.LVL22:
 201              	.LBB24:
 202              	.LBB25:
GAS LISTING /tmp/ccYtR0Wt.s 			page 9


  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 203              		.loc 3 15 36 is_stmt 1 discriminator 1
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 204              		.loc 3 15 46 is_stmt 0 discriminator 1
 205 0124 13850900 		mv	a0,s3
 206 0128 97000000 		call	__mem_free@plt
 206      E7800000 
 207              	.LVL23:
 208              	.L8:
 209              	.LBE25:
 210              	.LBE24:
  37:src/main.cpp  ****     delete inactiveThread;
 211              		.loc 1 37 5 is_stmt 1
 212              		.loc 1 37 26 is_stmt 0
 213 0130 630E0900 		beqz	s2,.L9
 214              		.loc 1 37 12 discriminator 1
 215 0134 13050900 		mv	a0,s2
 216 0138 97000000 		call	_ZN3TCBD1Ev@plt
 216      E7800000 
 217              	.LVL24:
 218              	.LBB26:
 219              	.LBB27:
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 220              		.loc 3 15 36 is_stmt 1 discriminator 1
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 221              		.loc 3 15 46 is_stmt 0 discriminator 1
 222 0140 13050900 		mv	a0,s2
 223 0144 97000000 		call	__mem_free@plt
 223      E7800000 
 224              	.LVL25:
 225              	.L9:
 226              	.LBE27:
 227              	.LBE26:
  38:src/main.cpp  ****     delete consolePrintThread;
 228              		.loc 1 38 5 is_stmt 1
 229              		.loc 1 38 30 is_stmt 0
 230 014c 638E0400 		beqz	s1,.L3
 231              		.loc 1 38 12 discriminator 1
 232 0150 13850400 		mv	a0,s1
 233 0154 97000000 		call	_ZN3TCBD1Ev@plt
 233      E7800000 
 234              	.LVL26:
 235              	.LBB28:
 236              	.LBB29:
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 237              		.loc 3 15 36 is_stmt 1 discriminator 1
  15:src/../h/tcb.hpp ****     void operator delete[](void *p) {__mem_free(p);}
 238              		.loc 3 15 46 is_stmt 0 discriminator 1
 239 015c 13850400 		mv	a0,s1
 240 0160 97000000 		call	__mem_free@plt
 240      E7800000 
 241              	.LVL27:
 242              	.L3:
 243              	.LBE29:
 244              	.LBE28:
  39:src/main.cpp  **** }...
 245              		.loc 1 39 1
GAS LISTING /tmp/ccYtR0Wt.s 			page 10


 246 0168 83308103 		ld	ra,56(sp)
 247              		.cfi_restore 1
 248 016c 03340103 		ld	s0,48(sp)
 249              		.cfi_restore 8
 250              		.cfi_def_cfa 2, 64
 251 0170 83348102 		ld	s1,40(sp)
 252              		.cfi_restore 9
 253              	.LVL28:
 254 0174 03390102 		ld	s2,32(sp)
 255              		.cfi_restore 18
 256              	.LVL29:
 257 0178 83398101 		ld	s3,24(sp)
 258              		.cfi_restore 19
 259              	.LVL30:
 260 017c 033A0101 		ld	s4,16(sp)
 261              		.cfi_restore 20
 262 0180 13010104 		addi	sp,sp,64
 263              		.cfi_def_cfa_offset 0
 264 0184 67800000 		jr	ra
 265              		.cfi_endproc
 266              	.LFE60:
 268              	.Letext0:
 269              		.file 4 "src/../h/../lib/hw.h"
 270              		.file 5 "src/../h/syscall_c.h"
 271              		.file 6 "src/../h/../h/_sem.hpp"
 272              		.file 7 "src/../h/list.hpp"
 273              		.file 8 "src/../h/../h/consolebuffer.hpp"
 274              		.file 9 "src/../h/MemoryAllocator.hpp"
 275              		.file 10 "src/../h/../lib/mem.h"
 276              		.file 11 "src/../test/printing.hpp"
 277              		.file 12 "src/../h/userMain.hpp"
GAS LISTING /tmp/ccYtR0Wt.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccYtR0Wt.s:14     .text:0000000000000000 _Z11testWrapperPv
     /tmp/ccYtR0Wt.s:18     .text:0000000000000000 .L0 
     /tmp/ccYtR0Wt.s:20     .text:0000000000000000 .L0 
     /tmp/ccYtR0Wt.s:21     .text:0000000000000004 .L0 
     /tmp/ccYtR0Wt.s:24     .text:000000000000000c .L0 
     /tmp/ccYtR0Wt.s:25     .text:000000000000000c .L0 
     /tmp/ccYtR0Wt.s:27     .text:0000000000000010 .L0 
     /tmp/ccYtR0Wt.s:29     .text:0000000000000010 .L0 
     /tmp/ccYtR0Wt.s:30     .text:0000000000000010 .L0 
     /tmp/ccYtR0Wt.s:33     .text:0000000000000018 .L0 
     /tmp/ccYtR0Wt.s:34     .text:0000000000000018 .L0 
     /tmp/ccYtR0Wt.s:38     .text:0000000000000028 .L0 
     /tmp/ccYtR0Wt.s:39     .text:000000000000002c .L0 
     /tmp/ccYtR0Wt.s:41     .text:0000000000000030 .L0 
     /tmp/ccYtR0Wt.s:42     .text:0000000000000030 .L0 
     /tmp/ccYtR0Wt.s:44     .text:0000000000000034 .L0 
     /tmp/ccYtR0Wt.s:46     .text:0000000000000038 .L0 
     /tmp/ccYtR0Wt.s:57     .text:0000000000000038 main
     /tmp/ccYtR0Wt.s:60     .text:0000000000000038 .L0 
     /tmp/ccYtR0Wt.s:61     .text:0000000000000038 .L0 
     /tmp/ccYtR0Wt.s:62     .text:000000000000003c .L0 
     /tmp/ccYtR0Wt.s:69     .text:0000000000000054 .L0 
     /tmp/ccYtR0Wt.s:70     .text:0000000000000054 .L0 
     /tmp/ccYtR0Wt.s:71     .text:0000000000000054 .L0 
     /tmp/ccYtR0Wt.s:72     .text:0000000000000054 .L0 
     /tmp/ccYtR0Wt.s:73     .text:0000000000000054 .L0 
     /tmp/ccYtR0Wt.s:74     .text:0000000000000054 .L0 
     /tmp/ccYtR0Wt.s:76     .text:0000000000000058 .L0 
     /tmp/ccYtR0Wt.s:78     .text:0000000000000058 .L0 
     /tmp/ccYtR0Wt.s:79     .text:0000000000000058 .L0 
     /tmp/ccYtR0Wt.s:82     .text:0000000000000060 .L0 
     /tmp/ccYtR0Wt.s:83     .text:0000000000000060 .L0 
     /tmp/ccYtR0Wt.s:88     .text:000000000000006c .L0 
     /tmp/ccYtR0Wt.s:89     .text:000000000000006c .L0 
     /tmp/ccYtR0Wt.s:94     .text:0000000000000078 .L0 
     /tmp/ccYtR0Wt.s:95     .text:0000000000000078 .L0 
     /tmp/ccYtR0Wt.s:100    .text:0000000000000084 .L0 
     /tmp/ccYtR0Wt.s:101    .text:0000000000000084 .L0 
     /tmp/ccYtR0Wt.s:107    .text:000000000000008c .L0 
  src/../h/riscv.hpp:127    .text:000000000000008c .L0 
     /tmp/ccYtR0Wt.s:119    .text:0000000000000090 .L0 
     /tmp/ccYtR0Wt.s:120    .text:0000000000000090 .L0 
     /tmp/ccYtR0Wt.s:121    .text:0000000000000090 .L0 
     /tmp/ccYtR0Wt.s:131    .text:0000000000000098 .L0 
     /tmp/ccYtR0Wt.s:132    .text:0000000000000098 .L0 
     /tmp/ccYtR0Wt.s:133    .text:0000000000000098 .L0 
     /tmp/ccYtR0Wt.s:141    .text:00000000000000b4 .L0 
     /tmp/ccYtR0Wt.s:142    .text:00000000000000b4 .L0 
     /tmp/ccYtR0Wt.s:146    .text:00000000000000bc .L0 
     /tmp/ccYtR0Wt.s:147    .text:00000000000000bc .L0 
     /tmp/ccYtR0Wt.s:148    .text:00000000000000bc .L0 
     /tmp/ccYtR0Wt.s:154    .text:00000000000000c0 .L0 
     /tmp/ccYtR0Wt.s:155    .text:00000000000000c0 .L0 
     /tmp/ccYtR0Wt.s:157    .text:00000000000000c4 .L0 
     /tmp/ccYtR0Wt.s:164    .text:00000000000000cc .L0 
GAS LISTING /tmp/ccYtR0Wt.s 			page 12


     /tmp/ccYtR0Wt.s:169    .text:00000000000000e0 .L0 
     /tmp/ccYtR0Wt.s:171    .text:00000000000000e4 .L0 
     /tmp/ccYtR0Wt.s:172    .text:00000000000000e4 .L0 
     /tmp/ccYtR0Wt.s:176    .text:00000000000000f4 .L0 
     /tmp/ccYtR0Wt.s:177    .text:00000000000000f4 .L0 
     /tmp/ccYtR0Wt.s:179    .text:00000000000000f8 .L0 
     /tmp/ccYtR0Wt.s:181    .text:00000000000000fc .L0 
     /tmp/ccYtR0Wt.s:187    .text:0000000000000108 .L0 
     /tmp/ccYtR0Wt.s:188    .text:0000000000000108 .L0 
     /tmp/ccYtR0Wt.s:195    .text:0000000000000114 .L0 
     /tmp/ccYtR0Wt.s:196    .text:0000000000000114 .L0 
     /tmp/ccYtR0Wt.s:198    .text:0000000000000118 .L0 
     /tmp/ccYtR0Wt.s:204    .text:0000000000000124 .L0 
     /tmp/ccYtR0Wt.s:205    .text:0000000000000124 .L0 
     /tmp/ccYtR0Wt.s:212    .text:0000000000000130 .L0 
     /tmp/ccYtR0Wt.s:213    .text:0000000000000130 .L0 
     /tmp/ccYtR0Wt.s:215    .text:0000000000000134 .L0 
     /tmp/ccYtR0Wt.s:221    .text:0000000000000140 .L0 
     /tmp/ccYtR0Wt.s:222    .text:0000000000000140 .L0 
     /tmp/ccYtR0Wt.s:229    .text:000000000000014c .L0 
     /tmp/ccYtR0Wt.s:230    .text:000000000000014c .L0 
     /tmp/ccYtR0Wt.s:232    .text:0000000000000150 .L0 
     /tmp/ccYtR0Wt.s:238    .text:000000000000015c .L0 
     /tmp/ccYtR0Wt.s:239    .text:000000000000015c .L0 
     /tmp/ccYtR0Wt.s:246    .text:0000000000000168 .L0 
     /tmp/ccYtR0Wt.s:247    .text:000000000000016c .L0 
     /tmp/ccYtR0Wt.s:249    .text:0000000000000170 .L0 
     /tmp/ccYtR0Wt.s:250    .text:0000000000000170 .L0 
     /tmp/ccYtR0Wt.s:252    .text:0000000000000174 .L0 
     /tmp/ccYtR0Wt.s:255    .text:0000000000000178 .L0 
     /tmp/ccYtR0Wt.s:258    .text:000000000000017c .L0 
     /tmp/ccYtR0Wt.s:261    .text:0000000000000180 .L0 
     /tmp/ccYtR0Wt.s:263    .text:0000000000000184 .L0 
     /tmp/ccYtR0Wt.s:265    .text:0000000000000188 .L0 
     /tmp/ccYtR0Wt.s:278    .text:0000000000000188 .L0 
     /tmp/ccYtR0Wt.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccYtR0Wt.s:34     .text:0000000000000018 .L0 
     /tmp/ccYtR0Wt.s:101    .text:0000000000000084 .L0 
     /tmp/ccYtR0Wt.s:134    .text:000000000000009c .L0 
     /tmp/ccYtR0Wt.s:164    .text:00000000000000cc .L0 
     /tmp/ccYtR0Wt.s:51     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccYtR0Wt.s:172    .text:00000000000000e4 .L0 
     /tmp/ccYtR0Wt.s:144    .text:00000000000000bc .L7
     /tmp/ccYtR0Wt.s:139    .text:00000000000000b4 .L4
     /tmp/ccYtR0Wt.s:191    .text:0000000000000114 .L6
     /tmp/ccYtR0Wt.s:208    .text:0000000000000130 .L8
     /tmp/ccYtR0Wt.s:225    .text:000000000000014c .L9
     /tmp/ccYtR0Wt.s:242    .text:0000000000000168 .L3
     /tmp/ccYtR0Wt.s:2389   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccYtR0Wt.s:4150   .debug_str:0000000000000cbd .LASF256
     /tmp/ccYtR0Wt.s:3856   .debug_str:000000000000040e .LASF257
     /tmp/ccYtR0Wt.s:4122   .debug_str:0000000000000bef .LASF258
     /tmp/ccYtR0Wt.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccYtR0Wt.s:268    .text:0000000000000188 .Letext0
     /tmp/ccYtR0Wt.s:3722   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccYtR0Wt.s:3900   .debug_str:000000000000056d .LASF0
     /tmp/ccYtR0Wt.s:3934   .debug_str:000000000000065e .LASF1
GAS LISTING /tmp/ccYtR0Wt.s 			page 13


     /tmp/ccYtR0Wt.s:4066   .debug_str:0000000000000a73 .LASF2
     /tmp/ccYtR0Wt.s:4078   .debug_str:0000000000000acd .LASF4
     /tmp/ccYtR0Wt.s:3914   .debug_str:00000000000005bf .LASF3
     /tmp/ccYtR0Wt.s:3742   .debug_str:0000000000000097 .LASF5
     /tmp/ccYtR0Wt.s:4032   .debug_str:0000000000000987 .LASF6
     /tmp/ccYtR0Wt.s:4024   .debug_str:0000000000000939 .LASF7
     /tmp/ccYtR0Wt.s:3922   .debug_str:000000000000060b .LASF8
     /tmp/ccYtR0Wt.s:3866   .debug_str:0000000000000445 .LASF9
     /tmp/ccYtR0Wt.s:3878   .debug_str:00000000000004c5 .LASF10
     /tmp/ccYtR0Wt.s:3788   .debug_str:0000000000000225 .LASF11
     /tmp/ccYtR0Wt.s:3852   .debug_str:00000000000003e4 .LASF12
     /tmp/ccYtR0Wt.s:3806   .debug_str:0000000000000290 .LASF13
     /tmp/ccYtR0Wt.s:3786   .debug_str:0000000000000215 .LASF14
     /tmp/ccYtR0Wt.s:4120   .debug_str:0000000000000be3 .LASF15
     /tmp/ccYtR0Wt.s:3834   .debug_str:0000000000000336 .LASF16
     /tmp/ccYtR0Wt.s:4106   .debug_str:0000000000000b7b .LASF17
     /tmp/ccYtR0Wt.s:4194   .debug_str:0000000000000eec .LASF18
     /tmp/ccYtR0Wt.s:3826   .debug_str:0000000000000311 .LASF172
     /tmp/ccYtR0Wt.s:4036   .debug_str:00000000000009a1 .LASF19
     /tmp/ccYtR0Wt.s:4134   .debug_str:0000000000000c4c .LASF20
     /tmp/ccYtR0Wt.s:4094   .debug_str:0000000000000b2a .LASF21
     /tmp/ccYtR0Wt.s:3772   .debug_str:00000000000001a2 .LASF22
     /tmp/ccYtR0Wt.s:3952   .debug_str:00000000000006d8 .LASF23
     /tmp/ccYtR0Wt.s:3794   .debug_str:0000000000000243 .LASF24
     /tmp/ccYtR0Wt.s:3800   .debug_str:0000000000000265 .LASF25
     /tmp/ccYtR0Wt.s:4128   .debug_str:0000000000000c2e .LASF219
     /tmp/ccYtR0Wt.s:4236   .debug_str:0000000000001017 .LASF26
     /tmp/ccYtR0Wt.s:3872   .debug_str:000000000000047a .LASF28
     /tmp/ccYtR0Wt.s:3776   .debug_str:00000000000001b9 .LASF27
     /tmp/ccYtR0Wt.s:3864   .debug_str:0000000000000439 .LASF29
     /tmp/ccYtR0Wt.s:3730   .debug_str:0000000000000019 .LASF30
     /tmp/ccYtR0Wt.s:4006   .debug_str:00000000000008c5 .LASF32
     /tmp/ccYtR0Wt.s:4104   .debug_str:0000000000000b68 .LASF31
     /tmp/ccYtR0Wt.s:4068   .debug_str:0000000000000a81 .LASF33
     /tmp/ccYtR0Wt.s:4080   .debug_str:0000000000000ad4 .LASF34
     /tmp/ccYtR0Wt.s:3738   .debug_str:0000000000000073 .LASF35
     /tmp/ccYtR0Wt.s:4130   .debug_str:0000000000000c36 .LASF38
     /tmp/ccYtR0Wt.s:3988   .debug_str:000000000000081a .LASF40
     /tmp/ccYtR0Wt.s:4074   .debug_str:0000000000000aa6 .LASF36
     /tmp/ccYtR0Wt.s:4002   .debug_str:00000000000008a4 .LASF37
     /tmp/ccYtR0Wt.s:4090   .debug_str:0000000000000b16 .LASF39
     /tmp/ccYtR0Wt.s:4030   .debug_str:0000000000000974 .LASF41
     /tmp/ccYtR0Wt.s:3940   .debug_str:0000000000000680 .LASF42
     /tmp/ccYtR0Wt.s:4182   .debug_str:0000000000000e4f .LASF43
     /tmp/ccYtR0Wt.s:3842   .debug_str:000000000000039a .LASF44
     /tmp/ccYtR0Wt.s:4244   .debug_str:0000000000001063 .LASF46
     /tmp/ccYtR0Wt.s:4064   .debug_str:0000000000000a60 .LASF45
     /tmp/ccYtR0Wt.s:3986   .debug_str:00000000000007fc .LASF47
     /tmp/ccYtR0Wt.s:4058   .debug_str:0000000000000a40 .LASF48
     /tmp/ccYtR0Wt.s:4162   .debug_str:0000000000000dd6 .LASF49
     /tmp/ccYtR0Wt.s:4208   .debug_str:0000000000000f56 .LASF50
     /tmp/ccYtR0Wt.s:3954   .debug_str:00000000000006e0 .LASF51
     /tmp/ccYtR0Wt.s:4146   .debug_str:0000000000000ca8 .LASF52
     /tmp/ccYtR0Wt.s:4228   .debug_str:0000000000000fd3 .LASF53
     /tmp/ccYtR0Wt.s:4072   .debug_str:0000000000000a98 .LASF63
     /tmp/ccYtR0Wt.s:3916   .debug_str:00000000000005d1 .LASF54
     /tmp/ccYtR0Wt.s:4016   .debug_str:0000000000000906 .LASF259
GAS LISTING /tmp/ccYtR0Wt.s 			page 14


     /tmp/ccYtR0Wt.s:4098   .debug_str:0000000000000b3e .LASF55
     /tmp/ccYtR0Wt.s:3728   .debug_str:0000000000000014 .LASF56
     /tmp/ccYtR0Wt.s:4230   .debug_str:0000000000000fda .LASF57
     /tmp/ccYtR0Wt.s:4168   .debug_str:0000000000000e02 .LASF58
     /tmp/ccYtR0Wt.s:3976   .debug_str:00000000000007c2 .LASF59
     /tmp/ccYtR0Wt.s:4158   .debug_str:0000000000000da9 .LASF60
     /tmp/ccYtR0Wt.s:3906   .debug_str:000000000000058e .LASF61
     /tmp/ccYtR0Wt.s:3978   .debug_str:00000000000007d0 .LASF62
     /tmp/ccYtR0Wt.s:3762   .debug_str:0000000000000123 .LASF64
     /tmp/ccYtR0Wt.s:3896   .debug_str:0000000000000558 .LASF65
     /tmp/ccYtR0Wt.s:3774   .debug_str:00000000000001ab .LASF72
     /tmp/ccYtR0Wt.s:3942   .debug_str:000000000000068d .LASF74
     /tmp/ccYtR0Wt.s:3920   .debug_str:00000000000005fb .LASF66
     /tmp/ccYtR0Wt.s:4136   .debug_str:0000000000000c52 .LASF68
     /tmp/ccYtR0Wt.s:3888   .debug_str:0000000000000520 .LASF67
     /tmp/ccYtR0Wt.s:3874   .debug_str:0000000000000486 .LASF69
     /tmp/ccYtR0Wt.s:3812   .debug_str:00000000000002c2 .LASF70
     /tmp/ccYtR0Wt.s:3736   .debug_str:000000000000004b .LASF71
     /tmp/ccYtR0Wt.s:3822   .debug_str:0000000000000303 .LASF73
     /tmp/ccYtR0Wt.s:3796   .debug_str:000000000000024c .LASF75
     /tmp/ccYtR0Wt.s:4088   .debug_str:0000000000000b05 .LASF76
     /tmp/ccYtR0Wt.s:3816   .debug_str:00000000000002dc .LASF77
     /tmp/ccYtR0Wt.s:4018   .debug_str:000000000000090b .LASF78
     /tmp/ccYtR0Wt.s:4100   .debug_str:0000000000000b55 .LASF79
     /tmp/ccYtR0Wt.s:3918   .debug_str:00000000000005ec .LASF81
     /tmp/ccYtR0Wt.s:3898   .debug_str:0000000000000567 .LASF80
     /tmp/ccYtR0Wt.s:3744   .debug_str:000000000000009e .LASF82
     /tmp/ccYtR0Wt.s:3732   .debug_str:0000000000000029 .LASF83
     /tmp/ccYtR0Wt.s:4014   .debug_str:00000000000008f4 .LASF84
     /tmp/ccYtR0Wt.s:3938   .debug_str:000000000000067a .LASF85
     /tmp/ccYtR0Wt.s:4144   .debug_str:0000000000000c98 .LASF86
     /tmp/ccYtR0Wt.s:3964   .debug_str:0000000000000753 .LASF87
     /tmp/ccYtR0Wt.s:3956   .debug_str:00000000000006f3 .LASF88
     /tmp/ccYtR0Wt.s:4226   .debug_str:0000000000000fcd .LASF89
     /tmp/ccYtR0Wt.s:4198   .debug_str:0000000000000eff .LASF90
     /tmp/ccYtR0Wt.s:4220   .debug_str:0000000000000f9a .LASF91
     /tmp/ccYtR0Wt.s:4114   .debug_str:0000000000000bbc .LASF92
     /tmp/ccYtR0Wt.s:3880   .debug_str:00000000000004d3 .LASF93
     /tmp/ccYtR0Wt.s:3820   .debug_str:00000000000002f6 .LASF94
     /tmp/ccYtR0Wt.s:3850   .debug_str:00000000000003d6 .LASF95
     /tmp/ccYtR0Wt.s:3844   .debug_str:00000000000003a5 .LASF96
     /tmp/ccYtR0Wt.s:3892   .debug_str:0000000000000540 .LASF97
     /tmp/ccYtR0Wt.s:3970   .debug_str:0000000000000795 .LASF98
     /tmp/ccYtR0Wt.s:4084   .debug_str:0000000000000aec .LASF99
     /tmp/ccYtR0Wt.s:3832   .debug_str:0000000000000330 .LASF100
     /tmp/ccYtR0Wt.s:3960   .debug_str:000000000000072d .LASF101
     /tmp/ccYtR0Wt.s:3824   .debug_str:000000000000030c .LASF102
     /tmp/ccYtR0Wt.s:3984   .debug_str:00000000000007ec .LASF103
     /tmp/ccYtR0Wt.s:4124   .debug_str:0000000000000c14 .LASF104
     /tmp/ccYtR0Wt.s:4110   .debug_str:0000000000000ba5 .LASF105
     /tmp/ccYtR0Wt.s:3752   .debug_str:00000000000000ee .LASF106
     /tmp/ccYtR0Wt.s:3764   .debug_str:000000000000012f .LASF107
     /tmp/ccYtR0Wt.s:3980   .debug_str:00000000000007d6 .LASF108
     /tmp/ccYtR0Wt.s:4008   .debug_str:00000000000008d2 .LASF109
     /tmp/ccYtR0Wt.s:4196   .debug_str:0000000000000ef5 .LASF110
     /tmp/ccYtR0Wt.s:4180   .debug_str:0000000000000e4a .LASF117
     /tmp/ccYtR0Wt.s:4040   .debug_str:00000000000009b0 .LASF111
GAS LISTING /tmp/ccYtR0Wt.s 			page 15


     /tmp/ccYtR0Wt.s:3750   .debug_str:00000000000000d6 .LASF112
     /tmp/ccYtR0Wt.s:4202   .debug_str:0000000000000f2d .LASF113
     /tmp/ccYtR0Wt.s:3778   .debug_str:00000000000001c9 .LASF114
     /tmp/ccYtR0Wt.s:3928   .debug_str:0000000000000648 .LASF115
     /tmp/ccYtR0Wt.s:3790   .debug_str:0000000000000234 .LASF116
     /tmp/ccYtR0Wt.s:4232   .debug_str:0000000000000fe0 .LASF118
     /tmp/ccYtR0Wt.s:4112   .debug_str:0000000000000bb7 .LASF119
     /tmp/ccYtR0Wt.s:3994   .debug_str:0000000000000859 .LASF120
     /tmp/ccYtR0Wt.s:4174   .debug_str:0000000000000e32 .LASF121
     /tmp/ccYtR0Wt.s:4034   .debug_str:000000000000098e .LASF122
     /tmp/ccYtR0Wt.s:4172   .debug_str:0000000000000e1f .LASF123
     /tmp/ccYtR0Wt.s:3996   .debug_str:000000000000085e .LASF124
     /tmp/ccYtR0Wt.s:4108   .debug_str:0000000000000b91 .LASF125
     /tmp/ccYtR0Wt.s:4062   .debug_str:0000000000000a5b .LASF126
     /tmp/ccYtR0Wt.s:4126   .debug_str:0000000000000c1b .LASF127
     /tmp/ccYtR0Wt.s:3848   .debug_str:00000000000003bf .LASF128
     /tmp/ccYtR0Wt.s:4070   .debug_str:0000000000000a8e .LASF260
     /tmp/ccYtR0Wt.s:4056   .debug_str:0000000000000a29 .LASF261
     /tmp/ccYtR0Wt.s:4132   .debug_str:0000000000000c41 .LASF129
     /tmp/ccYtR0Wt.s:4076   .debug_str:0000000000000aaf .LASF130
     /tmp/ccYtR0Wt.s:4060   .debug_str:0000000000000a52 .LASF131
     /tmp/ccYtR0Wt.s:3780   .debug_str:00000000000001e2 .LASF132
     /tmp/ccYtR0Wt.s:3948   .debug_str:00000000000006b4 .LASF133
     /tmp/ccYtR0Wt.s:3836   .debug_str:000000000000034c .LASF134
     /tmp/ccYtR0Wt.s:4022   .debug_str:000000000000092d .LASF135
     /tmp/ccYtR0Wt.s:4200   .debug_str:0000000000000f0f .LASF136
     /tmp/ccYtR0Wt.s:4248   .debug_str:0000000000001082 .LASF137
     /tmp/ccYtR0Wt.s:3808   .debug_str:00000000000002a0 .LASF138
     /tmp/ccYtR0Wt.s:4092   .debug_str:0000000000000b1f .LASF139
     /tmp/ccYtR0Wt.s:3968   .debug_str:0000000000000778 .LASF140
     /tmp/ccYtR0Wt.s:4046   .debug_str:00000000000009ef .LASF141
     /tmp/ccYtR0Wt.s:3734   .debug_str:0000000000000031 .LASF142
     /tmp/ccYtR0Wt.s:4054   .debug_str:0000000000000a24 .LASF143
     /tmp/ccYtR0Wt.s:4102   .debug_str:0000000000000b5a .LASF144
     /tmp/ccYtR0Wt.s:4152   .debug_str:0000000000000d81 .LASF145
     /tmp/ccYtR0Wt.s:4140   .debug_str:0000000000000c73 .LASF146
     /tmp/ccYtR0Wt.s:3756   .debug_str:0000000000000101 .LASF147
     /tmp/ccYtR0Wt.s:3868   .debug_str:0000000000000455 .LASF148
     /tmp/ccYtR0Wt.s:3926   .debug_str:0000000000000631 .LASF149
     /tmp/ccYtR0Wt.s:4052   .debug_str:0000000000000a0d .LASF150
     /tmp/ccYtR0Wt.s:3782   .debug_str:00000000000001ff .LASF151
     /tmp/ccYtR0Wt.s:3958   .debug_str:0000000000000716 .LASF152
     /tmp/ccYtR0Wt.s:3962   .debug_str:000000000000073a .LASF262
     /tmp/ccYtR0Wt.s:4216   .debug_str:0000000000000f8c .LASF153
     /tmp/ccYtR0Wt.s:3998   .debug_str:0000000000000872 .LASF154
     /tmp/ccYtR0Wt.s:3770   .debug_str:0000000000000197 .LASF155
     /tmp/ccYtR0Wt.s:4224   .debug_str:0000000000000fac .LASF156
     /tmp/ccYtR0Wt.s:3912   .debug_str:00000000000005b3 .LASF157
     /tmp/ccYtR0Wt.s:3768   .debug_str:0000000000000175 .LASF158
     /tmp/ccYtR0Wt.s:4086   .debug_str:0000000000000afd .LASF159
     /tmp/ccYtR0Wt.s:3876   .debug_str:00000000000004a7 .LASF160
     /tmp/ccYtR0Wt.s:4156   .debug_str:0000000000000da2 .LASF161
     /tmp/ccYtR0Wt.s:4178   .debug_str:0000000000000e44 .LASF162
     /tmp/ccYtR0Wt.s:4166   .debug_str:0000000000000dfd .LASF163
     /tmp/ccYtR0Wt.s:3932   .debug_str:0000000000000659 .LASF164
     /tmp/ccYtR0Wt.s:3726   .debug_str:000000000000000b .LASF165
     /tmp/ccYtR0Wt.s:3784   .debug_str:000000000000020e .LASF166
GAS LISTING /tmp/ccYtR0Wt.s 			page 16


     /tmp/ccYtR0Wt.s:3904   .debug_str:0000000000000587 .LASF167
     /tmp/ccYtR0Wt.s:3798   .debug_str:000000000000025f .LASF168
     /tmp/ccYtR0Wt.s:4004   .debug_str:00000000000008c0 .LASF169
     /tmp/ccYtR0Wt.s:4138   .debug_str:0000000000000c6e .LASF170
     /tmp/ccYtR0Wt.s:4204   .debug_str:0000000000000f46 .LASF171
     /tmp/ccYtR0Wt.s:4184   .debug_str:0000000000000e68 .LASF173
     /tmp/ccYtR0Wt.s:3846   .debug_str:00000000000003b3 .LASF174
     /tmp/ccYtR0Wt.s:4148   .debug_str:0000000000000cb0 .LASF175
     /tmp/ccYtR0Wt.s:3814   .debug_str:00000000000002d0 .LASF176
     /tmp/ccYtR0Wt.s:3890   .debug_str:0000000000000535 .LASF177
     /tmp/ccYtR0Wt.s:4000   .debug_str:000000000000088c .LASF178
     /tmp/ccYtR0Wt.s:3936   .debug_str:0000000000000671 .LASF179
     /tmp/ccYtR0Wt.s:4170   .debug_str:0000000000000e0a .LASF180
     /tmp/ccYtR0Wt.s:4240   .debug_str:0000000000001052 .LASF181
     /tmp/ccYtR0Wt.s:4010   .debug_str:00000000000008da .LASF182
     /tmp/ccYtR0Wt.s:4038   .debug_str:00000000000009a9 .LASF183
     /tmp/ccYtR0Wt.s:4042   .debug_str:00000000000009c8 .LASF184
     /tmp/ccYtR0Wt.s:3810   .debug_str:00000000000002bb .LASF185
     /tmp/ccYtR0Wt.s:3924   .debug_str:000000000000061e .LASF186
     /tmp/ccYtR0Wt.s:4214   .debug_str:0000000000000f84 .LASF187
     /tmp/ccYtR0Wt.s:4116   .debug_str:0000000000000bc1 .LASF188
     /tmp/ccYtR0Wt.s:3992   .debug_str:0000000000000851 .LASF189
     /tmp/ccYtR0Wt.s:3858   .debug_str:000000000000041b .LASF190
     /tmp/ccYtR0Wt.s:3944   .debug_str:00000000000006a6 .LASF191
     /tmp/ccYtR0Wt.s:4044   .debug_str:00000000000009db .LASF192
     /tmp/ccYtR0Wt.s:4242   .debug_str:000000000000105b .LASF193
     /tmp/ccYtR0Wt.s:3910   .debug_str:000000000000059f .LASF194
     /tmp/ccYtR0Wt.s:4048   .debug_str:00000000000009f8 .LASF195
     /tmp/ccYtR0Wt.s:4082   .debug_str:0000000000000ad9 .LASF196
     /tmp/ccYtR0Wt.s:3886   .debug_str:0000000000000519 .LASF197
     /tmp/ccYtR0Wt.s:3830   .debug_str:000000000000031d .LASF198
     /tmp/ccYtR0Wt.s:3828   .debug_str:0000000000000317 .LASF199
     /tmp/ccYtR0Wt.s:3894   .debug_str:0000000000000546 .LASF200
     /tmp/ccYtR0Wt.s:3908   .debug_str:0000000000000599 .LASF201
     /tmp/ccYtR0Wt.s:3818   .debug_str:00000000000002e4 .LASF202
     /tmp/ccYtR0Wt.s:3724   .debug_str:0000000000000000 .LASF203
     /tmp/ccYtR0Wt.s:3740   .debug_str:000000000000007f .LASF204
     /tmp/ccYtR0Wt.s:4176   .debug_str:0000000000000e39 .LASF205
     /tmp/ccYtR0Wt.s:4234   .debug_str:0000000000000fff .LASF206
     /tmp/ccYtR0Wt.s:4206   .debug_str:0000000000000f4c .LASF207
     /tmp/ccYtR0Wt.s:3802   .debug_str:000000000000026e .LASF208
     /tmp/ccYtR0Wt.s:3792   .debug_str:0000000000000239 .LASF209
     /tmp/ccYtR0Wt.s:3746   .debug_str:00000000000000ae .LASF210
     /tmp/ccYtR0Wt.s:4212   .debug_str:0000000000000f75 .LASF211
     /tmp/ccYtR0Wt.s:3950   .debug_str:00000000000006bc .LASF212
     /tmp/ccYtR0Wt.s:3870   .debug_str:000000000000046d .LASF213
     /tmp/ccYtR0Wt.s:4050   .debug_str:00000000000009ff .LASF214
     /tmp/ccYtR0Wt.s:4028   .debug_str:000000000000095f .LASF215
     /tmp/ccYtR0Wt.s:3838   .debug_str:0000000000000368 .LASF216
     /tmp/ccYtR0Wt.s:3754   .debug_str:00000000000000f4 .LASF217
     /tmp/ccYtR0Wt.s:3854   .debug_str:00000000000003f3 .LASF218
     /tmp/ccYtR0Wt.s:3930   .debug_str:000000000000064d .LASF220
     /tmp/ccYtR0Wt.s:3758   .debug_str:0000000000000119 .LASF221
     /tmp/ccYtR0Wt.s:4012   .debug_str:00000000000008ef .LASF222
     /tmp/ccYtR0Wt.s:4020   .debug_str:000000000000091d .LASF223
     /tmp/ccYtR0Wt.s:4142   .debug_str:0000000000000c8a .LASF224
     /tmp/ccYtR0Wt.s:3982   .debug_str:00000000000007dd .LASF225
GAS LISTING /tmp/ccYtR0Wt.s 			page 17


     /tmp/ccYtR0Wt.s:4188   .debug_str:0000000000000e87 .LASF226
     /tmp/ccYtR0Wt.s:4160   .debug_str:0000000000000db3 .LASF227
     /tmp/ccYtR0Wt.s:4246   .debug_str:0000000000001079 .LASF228
     /tmp/ccYtR0Wt.s:3990   .debug_str:0000000000000831 .LASF229
     /tmp/ccYtR0Wt.s:3804   .debug_str:0000000000000284 .LASF230
     /tmp/ccYtR0Wt.s:4190   .debug_str:0000000000000e92 .LASF231
     /tmp/ccYtR0Wt.s:4154   .debug_str:0000000000000d98 .LASF232
     /tmp/ccYtR0Wt.s:3884   .debug_str:00000000000004eb .LASF233
     /tmp/ccYtR0Wt.s:3840   .debug_str:000000000000038a .LASF234
     /tmp/ccYtR0Wt.s:3766   .debug_str:0000000000000140 .LASF235
     /tmp/ccYtR0Wt.s:4164   .debug_str:0000000000000df3 .LASF236
     /tmp/ccYtR0Wt.s:4238   .debug_str:0000000000001024 .LASF237
     /tmp/ccYtR0Wt.s:4210   .debug_str:0000000000000f65 .LASF238
     /tmp/ccYtR0Wt.s:4192   .debug_str:0000000000000eb7 .LASF239
     /tmp/ccYtR0Wt.s:3862   .debug_str:0000000000000434 .LASF240
     /tmp/ccYtR0Wt.s:58     .text:0000000000000038 .LFB60
     /tmp/ccYtR0Wt.s:266    .text:0000000000000188 .LFE60
     /tmp/ccYtR0Wt.s:3902   .debug_str:000000000000057a .LASF241
     /tmp/ccYtR0Wt.s:3618   .debug_loc:0000000000000000 .LLST1
     /tmp/ccYtR0Wt.s:3629   .debug_loc:0000000000000036 .LLST2
     /tmp/ccYtR0Wt.s:3640   .debug_loc:000000000000006c .LLST3
     /tmp/ccYtR0Wt.s:3972   .debug_str:00000000000007a7 .LASF242
     /tmp/ccYtR0Wt.s:103    .text:000000000000008c .LBB16
     /tmp/ccYtR0Wt.s:115    .text:0000000000000090 .LBE16
     /tmp/ccYtR0Wt.s:117    .text:0000000000000090 .LBB18
     /tmp/ccYtR0Wt.s:129    .text:0000000000000098 .LBE18
     /tmp/ccYtR0Wt.s:3647   .debug_loc:000000000000008f .LLST4
     /tmp/ccYtR0Wt.s:150    .text:00000000000000c0 .LBB20
     /tmp/ccYtR0Wt.s:162    .text:00000000000000cc .LBE20
     /tmp/ccYtR0Wt.s:3655   .debug_loc:00000000000000b3 .LLST5
     /tmp/ccYtR0Wt.s:184    .text:0000000000000108 .LBB22
     /tmp/ccYtR0Wt.s:193    .text:0000000000000114 .LBE22
     /tmp/ccYtR0Wt.s:3667   .debug_loc:00000000000000ea .LLST6
     /tmp/ccYtR0Wt.s:190    .text:0000000000000114 .LVL21
     /tmp/ccYtR0Wt.s:201    .text:0000000000000124 .LBB24
     /tmp/ccYtR0Wt.s:210    .text:0000000000000130 .LBE24
     /tmp/ccYtR0Wt.s:3674   .debug_loc:000000000000010d .LLST7
     /tmp/ccYtR0Wt.s:207    .text:0000000000000130 .LVL23
     /tmp/ccYtR0Wt.s:218    .text:0000000000000140 .LBB26
     /tmp/ccYtR0Wt.s:227    .text:000000000000014c .LBE26
     /tmp/ccYtR0Wt.s:3681   .debug_loc:0000000000000130 .LLST8
     /tmp/ccYtR0Wt.s:224    .text:000000000000014c .LVL25
     /tmp/ccYtR0Wt.s:235    .text:000000000000015c .LBB28
     /tmp/ccYtR0Wt.s:244    .text:0000000000000168 .LBE28
     /tmp/ccYtR0Wt.s:3688   .debug_loc:0000000000000153 .LLST9
     /tmp/ccYtR0Wt.s:241    .text:0000000000000168 .LVL27
     /tmp/ccYtR0Wt.s:80     .text:0000000000000060 .LVL3
     /tmp/ccYtR0Wt.s:84     .text:0000000000000068 .LVL4
     /tmp/ccYtR0Wt.s:90     .text:0000000000000074 .LVL6
     /tmp/ccYtR0Wt.s:96     .text:0000000000000080 .LVL8
     /tmp/ccYtR0Wt.s:137    .text:00000000000000b0 .LVL13
     /tmp/ccYtR0Wt.s:143    .text:00000000000000bc .LVL14
     /tmp/ccYtR0Wt.s:167    .text:00000000000000e0 .LVL18
     /tmp/ccYtR0Wt.s:174    .text:00000000000000f4 .LVL19
     /tmp/ccYtR0Wt.s:183    .text:0000000000000108 .LVL20
     /tmp/ccYtR0Wt.s:200    .text:0000000000000124 .LVL22
     /tmp/ccYtR0Wt.s:217    .text:0000000000000140 .LVL24
GAS LISTING /tmp/ccYtR0Wt.s 			page 18


     /tmp/ccYtR0Wt.s:234    .text:000000000000015c .LVL26
     /tmp/ccYtR0Wt.s:4096   .debug_str:0000000000000b32 .LASF243
     /tmp/ccYtR0Wt.s:3748   .debug_str:00000000000000c4 .LASF244
     /tmp/ccYtR0Wt.s:15     .text:0000000000000000 .LFB59
     /tmp/ccYtR0Wt.s:47     .text:0000000000000038 .LFE59
     /tmp/ccYtR0Wt.s:3695   .debug_loc:0000000000000176 .LLST0
     /tmp/ccYtR0Wt.s:31     .text:0000000000000018 .LVL1
     /tmp/ccYtR0Wt.s:36     .text:0000000000000028 .LVL2
     /tmp/ccYtR0Wt.s:3760   .debug_str:000000000000011e .LASF245
     /tmp/ccYtR0Wt.s:3946   .debug_str:00000000000006ae .LASF246
     /tmp/ccYtR0Wt.s:3860   .debug_str:000000000000042f .LASF263
     /tmp/ccYtR0Wt.s:3882   .debug_str:00000000000004e0 .LASF247
     /tmp/ccYtR0Wt.s:4250   .debug_str:000000000000108c .LASF248
     /tmp/ccYtR0Wt.s:4118   .debug_str:0000000000000bd5 .LASF249
     /tmp/ccYtR0Wt.s:3974   .debug_str:00000000000007ad .LASF250
     /tmp/ccYtR0Wt.s:4186   .debug_str:0000000000000e77 .LASF251
     /tmp/ccYtR0Wt.s:4026   .debug_str:000000000000094c .LASF252
     /tmp/ccYtR0Wt.s:4222   .debug_str:0000000000000fa0 .LASF253
     /tmp/ccYtR0Wt.s:3966   .debug_str:000000000000076b .LASF254
     /tmp/ccYtR0Wt.s:4218   .debug_str:0000000000000f91 .LASF255
     /tmp/ccYtR0Wt.s:86     .text:000000000000006c .LVL5
     /tmp/ccYtR0Wt.s:259    .text:000000000000017c .LVL30
     /tmp/ccYtR0Wt.s:92     .text:0000000000000078 .LVL7
     /tmp/ccYtR0Wt.s:256    .text:0000000000000178 .LVL29
     /tmp/ccYtR0Wt.s:98     .text:0000000000000084 .LVL9
     /tmp/ccYtR0Wt.s:253    .text:0000000000000174 .LVL28
     /tmp/ccYtR0Wt.s:112    .text:0000000000000090 .LVL11
     /tmp/ccYtR0Wt.s:126    .text:0000000000000098 .LVL12
     /tmp/ccYtR0Wt.s:149    .text:00000000000000c0 .LVL15
     /tmp/ccYtR0Wt.s:158    .text:00000000000000c8 .LVL16
     /tmp/ccYtR0Wt.s:160    .text:00000000000000cc .LVL17
     /tmp/ccYtR0Wt.s:19     .text:0000000000000000 .LVL0
     /tmp/ccYtR0Wt.s:279    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z8userMainv
_Z11printStringPKc
_ZN15MemoryAllocator10initMemoryEv
_ZN3TCB10initKernelEv
_ZN3TCB18initInactiveThreadEv
_ZN3TCB17initConsoleThreadEv
_ZN5Riscv14supervisorTrapEv
_Z13thread_createPP3TCBPFvPvES2_
_Z15thread_dispatchv
_ZN5Riscv13buffer_outputE
_ZNK13ConsoleBuffer7getSizeEv
_ZN3TCBD1Ev
__mem_free
